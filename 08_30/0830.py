'''
재귀함수
- 함수 내부에서 직접 혹은 간접적으로 자기 자신을 호출하는 함수
- 일반적으로 재귀적 정의를 이용해서 재귀 함수를 구현한다.
- 따라서, 기본 부분과 유도 부분으로 구성된다.
- 재귀적 프로그램을 작성하는 것은 반복 구조에 비해 간결하고 이해하기 쉽다.
    그러나 재귀에 대해 익숙하지 않은 개발자들은 재귀적 프로그램이 어렵다고 느낀다.
- 함수 호출은 프로그램 메모리 구조에서 스택을 사용한다. 따라서 재귀 호출은 반복적인
    스택의 사용을 의미하며 메모리 및 속도에서 성능저하가 발생한다.
'''
# def f(i, N, key, arr):    # i 현재 상태, N 목표
#     if i == N:
#         return 0
#     elif arr[i] == key:
#         return 1
#     else:
#         f(i+1, N, key, arr)
#
# N = 5
# A = [1,2,3,4,5]
# key = 3
# f(0, N, key, arr)
'''
- 해결할 문제를 고려해서 반복이나 재귀의 방법을 선택
- 재귀는 문제 해결을 위한 알고리즘 설계가 간단하고 자연스럽다.
- 일반적으로, 재귀적 알고리즘은 반복 알고리즘보다 더 많은 메모리와 연산을 필요로 한다.
- 입력 값n이 커질수록 재귀 알고리즘은 반복에 비해 비효율적일 수 있다.
'''

'''
Brute-force 탐색
- 자료들의 리스트에서 키 값을 찾기 위해 첫 번째 자료부터 비교하면서 진행한다.
'''
def f(i, N):
    if i == N:
        print(p)
        return
    else:
        for j in range(N):
            if used[j] == 0:
                p[i] = card[j]
                used[j] = 0
                f(i+1, N)

# card = list(map(int, input()))
card = [1,2,3,4,5]
N = 5
N = 3
used = [0]*N
p = [0]*6
f(0,5,3)
